<template>
  <div>
    <!-- code here -->
  </div>
</template>
<script>
import Flipper from '@/components/Flipper.vue'
import moment from 'moment'
import objectFitImages from 'object-fit-images'
const INTERVAL_TIME = 1000
const HOURS_OF_DAY = 24
export default {
  name: 'FlipClockView',
  components: {
    Flipper
  },
  data() {
    return {
      bootimer: null,
      adtimer: null,
      imgtimer: null,
      flipObjs: [],
      wzoom: Math.min(document.body.clientWidth / 320, 2.5),
      timezone: 8,
      adPicture: moment().utcOffset(8).date()
    }
  },
  computed: {
    isNotEmptyStr() {
      return (s) => typeof s === 'string' && s.length > 0
    }
  },
  methods: {
    init() {
      this.getTimezone()
      this.initClock()
      this.bootimer = setTimeout(this.run, (60 - this.bjtime.second()) * INTERVAL_TIME - this.bjtime.millisecond())
      this.adtimer = setTimeout(this.ad, (HOURS_OF_DAY - this.bjtime.hour()) * 3600000)
      this.$axios.defaults.timeout = INTERVAL_TIME
      this.$axios.defaults.baseURL = 'https://cm.660901.cn/v1'
      this.dal(0)
    },
    initClock() {
      this.fclock()
      this.flipObjs = [
        this.$refs.flipperHour1,
        this.$refs.flipperHour2,
        this.$refs.flipperMinute1,
        this.$refs.flipperMinute2
      ]
    },
    run() {
      this.fclock()
      this.bootimer = setTimeout(this.run, (60 - this.bjtime.second()) * INTERVAL_TIME - this.bjtime.millisecond())
    },
    ad() {
      this.$router.go(0)
    },
    fclock() {
      this.bjtime = this.getBjTime()
      const nextTimeStr = this.bjtime.format('HHmmss')
      for (let i = 0; i < this.flipObjs.length; i++) {
        this.flipObjs[i].setFront(nextTimeStr[i])
      }
    },
    fitimage() {
      if (this.adPicture === 0) {
        this.adPicture = this.getBjTime().date()
        this.imgtimer = setTimeout(this.fitimage, INTERVAL_TIME)
      } else {
        objectFitImages(this.$refs.adPic)
      }
    },
    dal(worktype) {
      this.$axios.post('/kindle', {
        cid: sessionStorage.getItem('cid'),
        cip: sessionStorage.getItem('cip'),
        cname: sessionStorage.getItem('cname'),
        cwork: worktype
      }).then(res => {
        return res.data
      }).catch(err => {
        return err
      })
    },
    getURLParameter(name, urlsearch) {
      const regExp = new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)')
      const match = regExp.exec(urlsearch || location.search)
      return match ? decodeURIComponent(match[1].replace(/\+/g, '%20')) : ''
    },
    getTimezone() {
      const zparm = this.getURLParameter('z', window.location.href)
      if (this.isNotEmptyStr(zparm) && !isNaN(Number(zparm))) {
        if (Number(zparm) >= -12 && Number(zparm) <= 12) {
          this.timezone = Number(zparm)
        }
      }
    },
    getBjTime() {
      return moment().utcOffset(this.timezone)
    }
  },
  mounted() {
    this.init()
  },
  beforeDestroy() {
    clearTimeout(this.bootimer)
    clearTimeout(this.adtimer)
    clearTimeout(this.imgtimer)
  }
}
</script>